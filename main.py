import os
import re
import logging
import asyncio
import aiohttp
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))  # ржЖржкржирж╛рж░ Admin ID ржмрж╕рж╛ржмрзЗржи

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

free_trial_users = {}
user_sessions = {}
user_login_state = {}  # user_id -> bool: Login ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗржЫрзЗ ржХрж┐ржирж╛

# ржХрж╛ржирж╛ржбрж╛рж░ Area Codes (рж╕рж░рзНржмрж╛ржзрж┐ржХ) - ржЖрж░ржУ ржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи
CANADA_AREA_CODES = [
    "204", "226", "236", "249", "250", "289", "306", "343", "365", "387", "403",
    "416", "418", "431", "437", "438", "450", "506", "514", "519", "548", "579",
    "581", "587", "604", "613", "639", "647", "672", "705", "709", "742", "778",
    "780", "782", "807", "819", "825", "867", "873", "902", "905"
]

# ржПржХржЯрж╛ рж╣рзЗрж▓рзНржкрж╛рж░ ржлрж╛ржВрж╢ржи ржпрж╛ ржЗржЙржЬрж╛рж░рзЗрж░ ржорзЗрж╕рзЗржЬ ржерзЗржХрзЗ ржХрж╛ржирж╛ржбрж╛рж░ ржирж╛ржорзНржмрж╛рж░ ржЧрзБрж▓рзЛ ржбрж┐ржЯрзЗржХрзНржЯ ржХрж░ржмрзЗ
def extract_canadian_numbers(text):
    # ржлрзЛржи ржиржорзНржмрж░рзЗрж░ ржкрзНржпрж╛ржЯрж╛рж░рзНржи: +1 + 3 ржбрж┐ржЬрж┐ржЯ ржПрж░рж┐рзЯрж╛ ржХрзЛржб + 7 ржбрж┐ржЬрж┐ржЯ ржирж╛ржорзНржмрж╛рж░
    # ржиржорзНржмрж░рзЗрж░ ржорж╛ржЭрзЗ - ржмрж╛ space ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ, +1 ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ ржмрж╛ ржирж╛ржУ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ
    pattern = re.compile(r'(?:\+?1[-.\s]?)?(\d{3})[-.\s]?(\d{3})[-.\s]?(\d{4})')
    matches = pattern.findall(text)

    valid_numbers = []
    for m in matches:
        area_code = m[0]
        if area_code in CANADA_AREA_CODES:
            # +1-ржПрж░ рж╕рж╛ржерзЗ рж╕ржорзНржкрзВрж░рзНржг ржиржорзНржмрж░ рждрзИрж░рж┐
            number = f"+1{area_code}{m[1]}{m[2]}"
            valid_numbers.append(number)
    return valid_numbers


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name
    username = update.effective_user.username or "N/A"

    if free_trial_users.get(user_id) == "active":
        keyboard = [[InlineKeyboardButton("Login ЁЯФС", callback_data="login")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"{user_name} Subscription ржЪрж╛рж▓рзБ ржЖржЫрзЗ ржПржмрж╛рж░ Log In ржХрж░рзБржи", reply_markup=reply_markup
        )
        return

    keyboard = [
        [InlineKeyboardButton("тмЬ 1 Hour - Free ЁЯМ╕", callback_data="plan_free")],
        [InlineKeyboardButton("ЁЯФ┤ 1 Day - 2$", callback_data="plan_1d")],
        [InlineKeyboardButton("ЁЯЯа 7 Day - 10$", callback_data="plan_7d")],
        [InlineKeyboardButton("ЁЯЯб 15 Day - 15$", callback_data="plan_15d")],
        [InlineKeyboardButton("ЁЯЯв 30 Day - 20$", callback_data="plan_30d")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"Welcome {user_name} ЁЯМ╕\nржЖржкржирж┐ ржХрзЛржиржЯрж┐ ржирж┐рждрзЗ ржЪрж╛ржЪрзНржЫрзЗржи..?", reply_markup=reply_markup
    )


async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if free_trial_users.get(user_id) == "active":
        keyboard = [[InlineKeyboardButton("Login ЁЯФС", callback_data="login")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("ржЖржкржирж╛рж░ Subscription ржЪрж╛рж▓рзБ ржЖржЫрзЗ, ржирж┐ржЪрзЗ Login ржХрж░рзБржи тмЗя╕П", reply_markup=reply_markup)
    else:
        await update.message.reply_text("тЭМ ржЖржкржирж╛рж░ Subscription ржирзЗржЗред ржкрзНрж░ржержорзЗ Subscription ржирж┐ржиред")


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_name = query.from_user.full_name
    username = query.from_user.username or "N/A"

    if query.data == "plan_free":
        if free_trial_users.get(user_id):
            await query.edit_message_text("тЪая╕П ржЖржкржирж┐ ржПрж░ржЗ ржоржзрзНржпрзЗ Free Trial ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЗржиред")
        else:
            free_trial_users[user_id] = "active"
            await query.message.delete()
            await context.bot.send_message(chat_id=user_id, text="тЬЕ ржЖржкржирж╛рж░ Free Trial Subscription ржЯрж┐ ржЪрж╛рж▓рзБ рж╣рзЯрзЗржЫрзЗ")

            async def revoke():
                await asyncio.sleep(3600)  # рзз ржШржирзНржЯрж╛ ржкрж░рзЗ ржЯрзНрж░рж╛рзЯрж╛рж▓ рж╢рзЗрж╖
                free_trial_users.pop(user_id, None)
                await context.bot.send_message(chat_id=user_id, text="ЁЯМ╗ ржЖржкржирж╛рж░ Free Trial ржЯрж┐ рж╢рзЗрж╖ рж╣рзЯрзЗржЫрзЗ")

            asyncio.create_task(revoke())

    elif query.data.startswith("plan_") and query.data != "plan_free":
        plan_info = {
            "plan_1d": ("1 Day", "2$"),
            "plan_7d": ("7 Day", "10$"),
            "plan_15d": ("15 Day", "15$"),
            "plan_30d": ("30 Day", "20$")
        }
        duration, price = plan_info.get(query.data, ("", ""))

        text = (
            f"{user_name} {duration} рж╕ржорзЯрзЗрж░ ржЬржирзНржп Subscription ржирж┐рждрзЗ ржЪрж╛ржЪрзНржЫрзЗред\n\n"
            f"ЁЯФЖ User Name : {user_name}\n"
            f"ЁЯФЖ User ID : {user_id}\n"
            f"ЁЯФЖ Username : @{username}"
        )
        buttons = [
            [InlineKeyboardButton("APPROVE тЬЕ", callback_data=f"approve_{user_id}"),
             InlineKeyboardButton("CANCEL тЭМ", callback_data=f"cancel_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)

        await query.message.delete()
        await context.bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=reply_markup)

        payment_msg = (
            f"Please send {price} to Binance Pay ID: \nржкрзЗржорзЗржирзНржЯ ржХрж░рзЗ ржкрзНрж░ржорж╛ржи рж╣рж┐рж╕рж╛ржмрзЗ Admin ржПрж░ ржХрж╛ржЫрзЗ рж╕рзНржХрж┐ржирж╢рж░рзНржЯ ржЕржержмрж╛ transaction ID ржжрж┐ржи @Mr_Evan3490\n\n"
            f"Your payment details:\n"
            f"ЁЯЖФ User ID: {user_id}\n"
            f"ЁЯСд Username: @{username}\n"
            f"ЁЯУЛ Plan: {duration}\n"
            f"ЁЯТ░ Amount: {price}"
        )
        await context.bot.send_message(chat_id=user_id, text=payment_msg)

    elif query.data == "login":
        user_login_state[user_id] = True
        await query.message.delete()
        await context.bot.send_message(
            chat_id=user_id,
            text="ржЖржкржирж╛рж░ Sid ржПржмржВ Auth Token ржжрж┐ржи ЁЯОЙ\n\nржмрзНржпржмрж╣рж╛рж░ рж╣ржмрзЗ: `<sid> <auth>`",
            parse_mode='Markdown'
        )

    elif query.data.startswith("approve_"):
        uid = int(query.data.split("_")[1])
        free_trial_users[uid] = "active"
        await context.bot.send_message(chat_id=uid, text="тЬЕ ржЖржкржирж╛рж░ Subscription ржЪрж╛рж▓рзБ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ")
        await query.edit_message_text("тЬЕ Approve ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржПржмржВ Permission ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред")

    elif query.data.startswith("cancel_"):
        await query.edit_message_text("тЭМ Subscription Request ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")

    elif query.data.startswith("buy_"):
        # ржлрж┐ржЪрж╛рж░: ржЗржЙржЬрж╛рж░ ржирж╛ржорзНржмрж╛рж░ ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ ржирж╛ржорзНржмрж╛рж░ ржХрж┐ржиржмрзЗ
        number = query.data.split("_", 1)[1]
        user_sid_auth = user_sessions.get(user_id)
        if not user_sid_auth:
            await query.answer("тЭМ ржкрзНрж░ржержорзЗ Login ржХрж░рзБржи ржПржмржВ Token ржжрж┐ржиред", show_alert=True)
            return

        sid, auth = user_sid_auth
        # Twilio API ржжрж┐рзЯрзЗ Check balance ржПржмржВ Buy рж▓ржЬрж┐ржХ ржПржЦрж╛ржирзЗ ржХрж░ржмрзЗржи

        # ржзрж░рзБржи ржХрзНрж░рзЯ рж╕ржлрж▓:
        new_text = f"ЁЯОЙ Congratulations! {number} ржирж╛ржорзНржмрж╛рж░ржЯрж┐ ржХрж┐ржирж╛ рж╣рзЯрзЗржЫрзЗ ЁЯОЙ"
        keyboard = [[InlineKeyboardButton("Message тЬЙя╕П", callback_data=f"message_{number}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(new_text, reply_markup=reply_markup)


async def handle_sid_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # Login ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗржЫрзЗ ржХрж┐ ржирж╛ ржЪрзЗржХ
    if not user_login_state.get(user_id):
        await update.message.reply_text("тЪая╕П Login ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ рждрж╛рж░ржкрж░ Token ржкрж╛ржарж╛ржиред")
        return

    # ржПржХржмрж╛рж░ Token ржирзЗржУрзЯрж╛рж░ ржкрж░ Login рж╕рзНржЯрзЗржЯ False ржХрж░рзЗ ржжрж┐ржи
    user_login_state[user_id] = False

    if free_trial_users.get(user_id) != "active":
        await update.message.reply_text("тЭМ ржЖржкржирж╛рж░ Subscription ржирзЗржЗред ржкрзНрж░ржержорзЗ Subscription ржирж┐ржиред")
        return

    try:
        sid, auth = update.message.text.strip().split(" ", 1)
    except:
        await update.message.reply_text("тЪая╕П рж╕ржарж┐ржХржнрж╛ржмрзЗ Sid ржПржмржВ Auth ржжрж┐ржи, ржЙржжрж╛рж╣рж░ржг: `<sid> <auth>`", parse_mode='Markdown')
        return

    # Twilio API ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи рж╢рзБрж░рзБ
    try:
        async with aiohttp.ClientSession(auth=aiohttp.BasicAuth(sid, auth)) as session:
            async with session.get("https://api.twilio.com/2010-04-01/Accounts.json") as resp:
                if resp.status == 401:
                    await update.message.reply_text("ЁЯОГ ржЯрзЛржХрзЗржи Suspend рж╣рзЯрзЗ ржЧрзЗржЫрзЗ ржЕржирзНржп ржЯрзЛржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи")
                    return
                data = await resp.json()
                account_name = data['accounts'][0]['friendly_name']

            # ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЪрзЗржХ
            balance_url = f"https://api.twilio.com/2010-04-01/Accounts/{sid}/Balance.json"
            async with session.get(balance_url) as b:
                balance_data = await b.json()
                balance = float(balance_data.get("balance", 0.0))
                currency = balance_data.get("currency", "USD")

                # USD ржирж╛ рж╣рж▓рзЗ рж░рзЗржЯ ржХржиржнрж╛рж░рзНржЯ (optional)
                if currency != "USD":
                    rate_url = f"https://open.er-api.com/v6/latest/{currency}"
                    async with session.get(rate_url) as rate_resp:
                        rates = await rate_resp.json()
                        usd_rate = rates["rates"].get("USD", 1)
                        balance = balance * usd_rate

            # ржЗржЙржЬрж╛рж░ рж╕рзЗрж╢ржирзЗ Token рж╕рзЗржн ржХрж░рзБржи
            user_sessions[user_id] = (sid, auth)

            await update.message.reply_text(
                f"ЁЯОЙ ЁЭРЛЁЭРиЁЭРа ЁЭРИЁЭРз ЁЭРТЁЭРоЁЭРЬЁЭРЬЁЭРЮЁЭРмЁЭРмЁЭРЯЁЭРоЁЭРе ЁЯОЙ\n\n"
                f"тнХ ЁЭЧФЁЭЧ░ЁЭЧ░ЁЭЧ╝ЁЭШВЁЭЧ╗ЁЭШБ ЁЭЧбЁЭЧоЁЭЧ║ЁЭЧ▓ : {account_name}\n"
                f"тнХ ЁЭЧФЁЭЧ░ЁЭЧ░ЁЭЧ╝ЁЭШВЁЭЧ╗ЁЭШБ ЁЭЧХЁЭЧоЁЭЧ╣ЁЭЧоЁЭЧ╗ЁЭЧ░ЁЭЧ▓ : ${balance:.2f}\n\n"
                f"ржмрж┐ржГржжрзНрж░ржГ ржирж╛ржорзНржмрж╛рж░ ржХрж┐ржирж╛рж░ ржЖржЧрзЗ ржЕржмрж╢рзНржпржЗ ЁЭЧХЁЭЧоЁЭЧ╣ЁЭЧоЁЭЧ╗ЁЭЧ░ЁЭЧ▓ ржЪрзЗржХ ржХрж░рзЗ ржирж┐ржмрзЗржи, ржХржо ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржерж╛ржХрж▓рзЗ ржирж╛ржорзНржмрж╛рж░ ржХрж┐ржирж╛ ржпрж╛ржмрзЗ ржирж╛ тЩ╗я╕П\n\n"
                f"Founded By ЁЭЧаЁЭЧ┐ ЁЭЧШЁЭШГЁЭЧоЁЭЧ╗ ЁЯНБ"
            )
    except Exception as e:
        logger.error(f"Twilio API Error: {e}")
        await update.message.reply_text("тЭМ ржЯрзЛржХрзЗржи ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ ржпрж╛рзЯржирж┐, ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")


async def buy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if free_trial_users.get(user_id) != "active":
        await update.message.reply_text("тЭМ ржЖржкржирж╛рж░ Subscription ржирзЗржЗред ржкрзНрж░ржержорзЗ Subscription ржирж┐ржиред")
        return

    args = context.args
    area_code = None
    if args:
        ac = args[0]
        if ac in CANADA_AREA_CODES:
            area_code = ac
        else:
            await update.message.reply_text("тЪая╕П ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржмрзИржз Canada Area Code ржжрж┐ржиред")
            return

    # рж░тАНрзНржпрж╛ржирзНржбржо рзйрзж ржЯрж┐ ржиржорзНржмрж░ ржЬрзЗржирж╛рж░рзЗржЯ
    import random
    def generate_number(ac):
        n = "".join([str(random.randint(0,9)) for _ in range(7)])
        return f"+1{ac}{n}"

    numbers = []
    if area_code:
        numbers = [generate_number(area_code) for _ in range(30)]
    else:
        # Random 30 ржЯрж┐ area code ржерзЗржХрзЗ
        numbers = [generate_number(random.choice(CANADA_AREA_CODES)) for _ in range(30)]

    msg = "ржЖржкржирж╛рж░ ржирж╛ржорзНржмрж╛рж░ ржЧрзБрж▓рзЛ рж╣рж▓рзЛ ЁЯСЗЁЯСЗ\n" + "\n".join(numbers)
    await update.message.reply_text(msg)


async def handle_number_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if free_trial_users.get(user_id) != "active":
        return

    text = update.message.text
    numbers = extract_canadian_numbers(text)
    if not numbers:
        await update.message.reply_text("тЪая╕П ржХрзЛржирзЛ ржмрзИржз Canada ржирж╛ржорзНржмрж╛рж░ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
        return

    # ржкрзНрж░рждрж┐ржЯрж┐ ржирж╛ржорзНржмрж╛рж░рзЗрж░ ржирж┐ржЪрзЗ Buy ржмрж╛ржЯржи рж╕рж╣ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ
    for num in numbers:
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("Buy ЁЯТ░", callback_data=f"buy_{num}")]])
        await update.message.reply_text(f"{num}", reply_markup=keyboard)


async def handle_update(request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.update_queue.put(update)
    return web.Response(text="OK")


application = Application.builder().token(BOT_TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("login", login_command))
application.add_handler(CommandHandler("buy", buy_command))
application.add_handler(CallbackQueryHandler(handle_callback))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sid_auth))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_number_messages))

if __name__ == "__main__":
    # For webhook
    # import ssl
    # ssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    # ssl_context.load_cert_chain("cert.pem", "key.pem")
    # web.run_app(app, port=8443, ssl_context=ssl_context)

    application.run_polling()
