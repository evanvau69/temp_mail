import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from aiohttp import web

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Admin Telegram User ID

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

# ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶ø‡¶Æ‡ßç‡¶™‡¶≤ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú (‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶®‡ßü, ‡¶∏‡ßá‡¶∂‡¶® ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá)
user_permissions = {}
free_trial_users = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name

    if user_id in user_permissions and user_permissions[user_id] == "subscribed":
        # Already subscribed user
        keyboard = [[InlineKeyboardButton("Login üîë", callback_data="login")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"{user_name}, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Subscription ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶® Login ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", reply_markup=reply_markup)
    elif user_id in free_trial_users:
        await update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Free Trial ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá‡•§")
    else:
        keyboard = [
            [InlineKeyboardButton(" 1 Hour - Free üå∏", callback_data="free_trial")],
            [InlineKeyboardButton("üî¥ 1 Day - 2$", callback_data="1_day")],
            [InlineKeyboardButton("üü† 7 Day - 10$", callback_data="7_day")],
            [InlineKeyboardButton("üü° 15 Day - 15$", callback_data="15_day")],
            [InlineKeyboardButton("üü¢ 30 Day - 20$", callback_data="30_day")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"Welcome {user_name} üå∏\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶®‡¶ü‡¶ø ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡¶®..?", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_name = query.from_user.full_name
    username = query.from_user.username or "NoUsername"

    if query.data == "free_trial":
        if user_id in free_trial_users:
            await query.edit_message_text("‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá Free Trial ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§")
            return
        free_trial_users.add(user_id)
        user_permissions[user_id] = "free_trial"
        await query.edit_message_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Free Trial Subscription ‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‚úÖ")
        # TODO: ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶´‡ßç‡¶∞‡¶ø ‡¶ü‡ßç‡¶∞‡¶æ‡ßü‡¶æ‡¶≤ ‡¶∏‡¶Æ‡ßü ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶è‡¶¨‡¶Ç permission ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
        return

    # If user clicked on paid subscription
    plans = {
        "1_day": ("1 Day", 2),
        "7_day": ("7 Day", 10),
        "15_day": ("15 Day", 15),
        "30_day": ("30 Day", 20),
    }

    if query.data in plans:
        plan_name, amount = plans[query.data]
        # Admin ‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï (Bot ‡¶è ‡¶®‡¶ø‡¶ú‡ßá‡¶á)
        msg = (
            f"üîÜ User Name : {user_name}\n"
            f"üîÜ User Id : {user_id}\n"
            f"üîÜ Username : @{username}\n\n"
            f"Subscription ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶ö‡ßç‡¶õ‡ßá: {plan_name} - ${amount}"
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=msg, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("APPROVE ‚úÖ", callback_data=f"approve_{user_id}"),
             InlineKeyboardButton("CANCEL ‚ùå", callback_data=f"cancel_{user_id}")]
        ]))
        await query.edit_message_text("Admin ‡¶ï‡ßá Subscription ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

    # Approve or Cancel by admin
    if query.data.startswith("approve_") or query.data.startswith("cancel_"):
        if query.from_user.id != ADMIN_ID:
            await query.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶è ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶™‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡¶® ‡¶®‡¶æ!", show_alert=True)
            return
        target_user_id = int(query.data.split("_")[1])
        if query.data.startswith("approve_"):
            user_permissions[target_user_id] = "subscribed"
            await context.bot.send_message(chat_id=target_user_id, text="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Subscription ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ Login ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            await query.edit_message_text("Subscription Approved ‚úÖ")
        else:
            await context.bot.send_message(chat_id=target_user_id, text="Subscription ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
            await query.edit_message_text("Subscription Cancelled ‚ùå")

    if query.data == "login":
        await query.edit_message_text("Login ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶¨‡ßá‡¶®‡•§")

async def handle_update(request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.update_queue.put(update)
    return web.Response(text="OK")

if __name__ == "__main__":
    from aiohttp import web
    import asyncio

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    web_app = web.Application()
    web_app.router.add_post(f"/{BOT_TOKEN}", handle_update)

    port = int(os.environ.get("PORT", "10000"))

    logging.info(f"Starting server on port {port}")

    web.run_app(web_app, host="0.0.0.0", port=port)
