import os
import re
import logging
import asyncio
import aiohttp
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # Admin Telegram ID

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

free_trial_users = {}
user_sessions = {}  # ‡¶∏‡ßá‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú (‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá sid-auth token ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá)

# Canada ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡¶∏‡¶ï‡¶≤ Area Code ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü (‡ß´‡ß¶+)
CANADA_AREA_CODES = [
    '204', '236', '250', '289', '343', '365', '387', '403', '416', '418', '431', '437',
    '438', '450', '506', '514', '519', '579', '581', '587', '604', '613', '639', '647',
    '672', '705', '709', '742', '778', '780', '782', '807', '819', '867', '873', '902',
    '905', '226', '249', '289', '365', '437', '519', '548', '613', '647', '705', '807',
    '905', '343', '289', '226'
]

# --- ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ detect ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
def extract_canada_numbers(text):
    # Regex ‡¶Ø‡¶æ ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ß‡¶∞‡¶¨‡ßá
    pattern = re.compile(r'(\+?1)?\s*[-.(]*\s*(\d{3})\s*[-.)]*\s*(\d{3})\s*[-.]*\s*(\d{4})')
    found_numbers = []
    for match in pattern.finditer(text):
        area_code = match.group(2)
        if area_code in CANADA_AREA_CODES:
            # +1XXXXXXXXXX ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã
            number = '+1' + area_code + match.group(3) + match.group(4)
            if number not in found_numbers:
                found_numbers.append(number)
    return found_numbers

# --- /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name

    if free_trial_users.get(user_id) == "active":
        keyboard = [[InlineKeyboardButton("Login üîë", callback_data="login")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"{user_name}, Subscription ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá, ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", reply_markup=reply_markup)
        return

    keyboard = [
        [InlineKeyboardButton("‚¨ú 1 Hour - Free üå∏", callback_data="plan_free")],
        [InlineKeyboardButton("üî¥ 1 Day - 2$", callback_data="plan_1d")],
        [InlineKeyboardButton("üü† 7 Day - 10$", callback_data="plan_7d")],
        [InlineKeyboardButton("üü° 15 Day - 15$", callback_data="plan_15d")],
        [InlineKeyboardButton("üü¢ 30 Day - 20$", callback_data="plan_30d")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"Welcome {user_name} üå∏\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶®‡¶ü‡¶ø ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶®?", reply_markup=reply_markup)

# --- /login ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ---
async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if free_trial_users.get(user_id) == "active":
        keyboard = [[InlineKeyboardButton("Login üîë", callback_data="login")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Subscription ‡¶Ü‡¶õ‡ßá, ‡¶®‡¶ø‡¶ö‡ßá Login ‡¶ï‡¶∞‡ßÅ‡¶® ‚¨áÔ∏è", reply_markup=reply_markup)
    else:
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Subscription ‡¶®‡ßá‡¶á‡•§ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá Subscription ‡¶®‡¶ø‡¶®‡•§")

# --- Callback Handler ---
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_name = query.from_user.full_name

    data = query.data

    if data == "plan_free":
        if free_trial_users.get(user_id):
            await query.edit_message_text("‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ó‡ßá‡¶á Free Trial ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§")
        else:
            free_trial_users[user_id] = "active"
            await query.message.delete()
            await context.bot.send_message(chat_id=user_id, text="‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Free Trial Subscription ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá")

            async def revoke():
                await asyncio.sleep(3600)  # 1 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶™‡¶∞‡ßá
                free_trial_users.pop(user_id, None)
                await context.bot.send_message(chat_id=user_id, text="üåª ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Free Trial ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá‡¶õ‡ßá")

            asyncio.create_task(revoke())

    elif data.startswith("plan_") and data != "plan_free":
        plan_info = {
            "plan_1d": ("1 Day", "2$"),
            "plan_7d": ("7 Day", "10$"),
            "plan_15d": ("15 Day", "15$"),
            "plan_30d": ("30 Day", "20$")
        }
        duration, price = plan_info.get(data, ("Unknown", "0$"))

        text = (
            f"{user_name} {duration} Subscription ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡¶®‡•§\n\n"
            f"üîÜ User Name : {user_name}\n"
            f"üîÜ User ID : {user_id}\n"
            f"üîÜ Username : @{query.from_user.username or 'N/A'}"
        )
        buttons = [
            [InlineKeyboardButton("APPROVE ‚úÖ", callback_data=f"approve_{user_id}"),
             InlineKeyboardButton("CANCEL ‚ùå", callback_data=f"cancel_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)

        await query.message.delete()
        await context.bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=reply_markup)

        payment_msg = (
            f"Please send {price} to Binance Pay ID.\n"
            f"‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶£ Admin-‡¶ï‡ßá ‡¶¶‡¶ø‡¶® @Mr_Evan3490\n\n"
            f"Your payment details:\n"
            f"üÜî User ID: {user_id}\n"
            f"üë§ Username: @{query.from_user.username or 'N/A'}\n"
            f"üìã Plan: {duration}\n"
            f"üí∞ Amount: {price}"
        )
        await context.bot.send_message(chat_id=user_id, text=payment_msg)

    elif data == "login":
        await context.bot.send_message(chat_id=user_id, text="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Sid ‡¶è‡¶¨‡¶Ç Auth Token ‡¶¶‡¶ø‡¶® üéâ\n\n‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: `<sid> <auth>`", parse_mode="Markdown")

    elif data.startswith("approve_"):
        uid = int(data.split("_")[1])
        free_trial_users[uid] = "active"
        await context.bot.send_message(chat_id=uid, text="‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Subscription ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
        await query.edit_message_text("‚úÖ Approve ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç Permission ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

    elif data.startswith("cancel_"):
        await query.edit_message_text("‚ùå Subscription Request ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

    elif data.startswith("buy_"):
        # buy_<number> ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
        buy_number = data[4:]
        # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∂‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
        confirm_text = f"üéâ Congratulations! ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶ü‡¶ø ‡¶ï‡¶ø‡¶®‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá üéâ\n\n‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {buy_number}"
        keyboard = [[InlineKeyboardButton("Message ‚úâÔ∏è", callback_data=f"msg_{buy_number}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=confirm_text, reply_markup=reply_markup)

    elif data.startswith("msg_"):
        # message button ‡¶è ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Ø‡¶æ ‡¶π‡¶¨‡ßá (‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®)
        msg_number = data[4:]
        await context.bot.send_message(chat_id=user_id, text=f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶®: {msg_number}")

# --- /buy ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° --- 
async def buy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if free_trial_users.get(user_id) != "active":
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Subscription ‡¶®‡ßá‡¶á, ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá Subscription ‡¶®‡¶ø‡¶®‡•§")
        return

    args = context.args
    # ‡¶Ø‡¶¶‡¶ø args ‡¶•‡¶æ‡¶ï‡ßá ‡¶è‡¶¨‡¶Ç valid canada area code ‡¶π‡ßü, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶¨‡ßá, ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡ß©‡ß¶ ‡¶ü‡¶ø ‡¶¶‡¶ø‡¶¨‡ßá
    area_code = None
    if args:
        arg_code = args[0]
        if arg_code.isdigit() and arg_code in CANADA_AREA_CODES:
            area_code = arg_code

    # ‡ß©‡ß¶ ‡¶ü‡¶ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶§‡ßà‡¶∞‡ßÄ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶¨‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü Area code)
    import random

    def generate_random_number(code):
        # 7 digit random ‡¶Ö‡¶Ç‡¶∂
        rest = ''.join(str(random.randint(0,9)) for _ in range(7))
        return f"+1{code}{rest}"

    numbers_list = []
    if area_code:
        for _ in range(30):
            numbers_list.append(generate_random_number(area_code))
    else:
        for _ in range(30):
            code = random.choice(CANADA_AREA_CODES)
            numbers_list.append(generate_random_number(code))

    # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
    msg_text = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶π‡¶≤‡ßã üëáüëá\n\n" + "\n".join(numbers_list)
    await update.message.reply_text(msg_text)

# --- ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ø‡¶ñ‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶¨‡ßá ---
async def handle_numbers_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if free_trial_users.get(user_id) != "active":
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Subscription ‡¶®‡ßá‡¶á, ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá Subscription ‡¶®‡¶ø‡¶®‡•§")
        return

    text = update.message.text
    numbers = extract_canada_numbers(text)
    if not numbers:
        await update.message.reply_text("‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßà‡¶ß Canada ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    # reply ‡¶§‡ßá ‡¶∏‡¶¨ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ì ‡¶®‡¶ø‡¶ö‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ Buy button ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá
    buttons = []
    for num in numbers:
        buttons.append([InlineKeyboardButton(f"Buy üí∞", callback_data=f"buy_{num}")])

    # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßã
    reply_markup = InlineKeyboardMarkup(buttons)
    msg_text = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶æ‡¶õ‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®:\n\n" + "\n".join(numbers)
    await update.message.reply_text(msg_text, reply_markup=reply_markup)

# --- Sid ‡¶è‡¶¨‡¶Ç Auth Token handle ‡¶ï‡¶∞‡¶æ ---
async def handle_sid_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if free_trial_users.get(user_id) != "active":
        return

    text = update.message.text.strip()

    # ‡¶Ø‡¶¶‡¶ø text Sid Auth ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶®‡¶æ ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡¶æ‡¶∏
    if len(text.split()) != 2:
        # ‡¶è‡¶ü‡¶æ ‡¶Æ‡¶®‡ßá ‡¶π‡¶¨‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞, ‡¶§‡¶æ‡¶á ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶π‡¶¨‡ßá
        return

    sid, auth = text.split()

    async with aiohttp.ClientSession(auth=aiohttp.BasicAuth(sid, auth)) as session:
        try:
            # Twilio account verify
            async with session.get("https://api.twilio.com/2010-04-01/Accounts.json") as resp:
                if resp.status == 401:
                    await update.message.reply_text("‡¶ü‡ßã‡¶ï‡ßá‡¶® Suspend ‡¶π‡ßü‡ßá‡¶õ‡ßá üò• ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‚ôªÔ∏è")
                    return
                data = await resp.json()
                account_name = data['accounts'][0]['friendly_name']

            # Twilio balance check
            balance_url = f"https://api.twilio.com/2010-04-01/Accounts/{sid}/Balance.json"
            async with session.get(balance_url) as bresp:
                if bresp.status != 200:
                    await update.message.reply_text("Balance check ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
                    return
                balance_data = await bresp.json()
                balance = float(balance_data.get("balance", 0.0))
                currency = balance_data.get("currency", "USD")

                # ‡¶Ø‡¶¶‡¶ø USD ‡¶®‡¶æ ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∞‡ßá‡¶ü ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® (optional)

            await update.message.reply_text(
                f"üéâ Log In Successful üéâ\n\n"
                f"‚≠ï Account Name: {account_name}\n"
                f"‚≠ï Account Balance: ${balance:.2f}\n\n"
                f"‡¶¨‡¶ø‡¶É‡¶¶‡ßç‡¶∞‡¶É ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§"
            )
            # ‡¶∏‡ßá‡¶∂‡¶® ‡¶è sid-auth ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶Ø‡¶º
            user_sessions[user_id] = (sid, auth)

        except Exception as e:
            logger.error(f"Error verifying Twilio token: {e}")
            await update.message.reply_text("‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# --- ‡¶Æ‡ßÇ‡¶≤ Handler ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ---
async def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("login", login_command))
    application.add_handler(CommandHandler("buy", buy_command))
    application.add_handler(CallbackQueryHandler(handle_callback))
    # Sid/Auth ‡¶ï‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sid_auth))
    # ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ detect ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (‡¶Ø‡¶æ ‡¶Ü‡¶ó‡ßá sid_auth ‡¶è ‡¶™‡¶æ‡¶∏ ‡¶®‡¶æ ‡¶π‡¶ì‡ßü‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶æ‡¶¨‡ßá‡¶®)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_numbers_message))

    await application.initialize()
    await application.start()

    # Webhook ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ (‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶π‡ßü)
    from aiohttp import web
    async def handle_update(request):
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return web.Response(text="OK")

    app = web.Application()
    app.router.add_post("/webhook", handle_update)
    await web._run_app(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped.")
