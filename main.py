import os
import logging
import asyncio
import aiohttp
import re
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, CallbackQueryHandler,
    MessageHandler, filters
)

# Environment Variables (Render ‡¶è environment ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶∏‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá)
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú (‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ dict, ‡¶™‡ßç‡¶∞‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá DB ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§)
free_trial_users = {}      # user_id: "active"
paid_subscriptions = {}    # user_id: {"plan": plan_name, "active": True}
user_sessions = {}         # user_id: {"sid": "", "auth": ""}
user_buy_messages = {}     # user_id: message_id (‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú)

# ‡¶ï‡¶æ‡¶®‡¶æ‡¶°‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü (‡¶™‡ßç‡¶≤‡¶æ‡¶∏ ‡¶ï‡ßã‡¶° ‡¶õ‡¶æ‡ßú‡¶æ, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞)
canada_numbers = [
    "+12015550101", "+12015550102", "+12015550103", "+12015550104",
    "+12015550105", "+12015550106", "+12015550107", "+12015550108",
    "+12015550109", "+12015550110", "+12015550111", "+12015550112",
    "+12015550113", "+12015550114", "+12015550115", "+12015550116",
    "+12015550117", "+12015550118", "+12015550119", "+12015550120",
    "+12015550121", "+12015550122", "+12015550123", "+12015550124",
    "+12015550125", "+12015550126", "+12015550127", "+12015550128",
    "+12015550129", "+12015550130"
]

# ====================
# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
# ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name
    username = update.effective_user.username or "N/A"

    if paid_subscriptions.get(user_id, {}).get("active"):
        keyboard = [[InlineKeyboardButton("Login üîë", callback_data="login")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"{user_name} Subscription ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá ‡¶è‡¶¨‡¶æ‡¶∞ Log In ‡¶ï‡¶∞‡ßÅ‡¶®", reply_markup=reply_markup)
        return

    if free_trial_users.get(user_id) == "active":
        keyboard = [[InlineKeyboardButton("Login üîë", callback_data="login")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"{user_name} Free Trial ‡¶ö‡¶≤‡¶õ‡ßá, ‡¶è‡¶¨‡¶æ‡¶∞ Log In ‡¶ï‡¶∞‡ßÅ‡¶®", reply_markup=reply_markup)
        return

    keyboard = [
        [InlineKeyboardButton("‚¨ú 1 Hour - Free üå∏", callback_data="plan_free")],
        [InlineKeyboardButton("üî¥ 1 Day - 2$", callback_data="plan_1d")],
        [InlineKeyboardButton("üü† 7 Day - 10$", callback_data="plan_7d")],
        [InlineKeyboardButton("üü° 15 Day - 15$", callback_data="plan_15d")],
        [InlineKeyboardButton("üü¢ 30 Day - 20$", callback_data="plan_30d")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"Welcome {user_name} üå∏\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶®‡¶ü‡¶ø ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡¶®..?", reply_markup=reply_markup)

# ======================
# /login ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
# ======================
async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if paid_subscriptions.get(user_id, {}).get("active") or free_trial_users.get(user_id) == "active":
        keyboard = [[InlineKeyboardButton("Login üîë", callback_data="login")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Subscription ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá, ‡¶®‡¶ø‡¶ö‡ßá Login ‡¶ï‡¶∞‡ßÅ‡¶® ‚¨áÔ∏è", reply_markup=reply_markup)
    else:
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Subscription ‡¶®‡ßá‡¶á‡•§ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá Subscription ‡¶®‡¶ø‡¶®‡•§")

# ======================
# Callback Query ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
# ======================
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_name = query.from_user.full_name
    username = query.from_user.username or "N/A"

    # ==== Free Trial Plan ====
    if query.data == "plan_free":
        if free_trial_users.get(user_id):
            await query.edit_message_text("‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶∞‡¶á ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá Free Trial ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§")
        else:
            free_trial_users[user_id] = "active"
            await query.message.delete()
            await context.bot.send_message(chat_id=user_id, text="‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Free Trial Subscription ‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá")

            async def revoke():
                await asyncio.sleep(3600)  # ‡ßß ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶™‡¶∞‡ßá
                free_trial_users.pop(user_id, None)
                await context.bot.send_message(chat_id=user_id, text="üåª ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Free Trial ‡¶ü‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶π‡¶§‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá")
            asyncio.create_task(revoke())
        return

    # ==== Paid Plans ====
    if query.data.startswith("plan_") and query.data != "plan_free":
        plan_info = {
            "plan_1d": ("1 Day", "2"),
            "plan_7d": ("7 Day", "10"),
            "plan_15d": ("15 Day", "15"),
            "plan_30d": ("30 Day", "20")
        }
        duration, price = plan_info.get(query.data, ("", ""))

        text = (
            f"{user_name} {duration} ‡¶∏‡¶Æ‡ßü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Subscription ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§\n\n"
            f"üîÜ User Name : {user_name}\n"
            f"üîÜ User ID : {user_id}\n"
            f"üîÜ Username : @{username}"
        )
        buttons = [
            [InlineKeyboardButton("APPRUVE ‚úÖ", callback_data=f"approve_{user_id}_{duration}_{price}"),
             InlineKeyboardButton("CANCEL ‚ùå", callback_data=f"cancel_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)

        await query.message.delete()
        await context.bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=reply_markup)

        payment_msg = (
            f"Please send ${price} to Binance Pay ID:\n"
            f"‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶® ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá Admin ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶∏‡ßç‡¶ï‡¶ø‡¶®‡¶∂‡¶∞‡ßç‡¶ü ‡¶Ö‡¶•‡¶¨‡¶æ transaction ID ‡¶¶‡¶ø‡¶® @Mr_Evan3490\n\n"
            f"Your payment details:\n"
            f"üÜî User ID: {user_id}\n"
            f"üë§ Username: @{username}\n"
            f"üìã Plan: {duration}\n"
            f"üí∞ Amount: ${price}"
        )
        await context.bot.send_message(chat_id=user_id, text=payment_msg)
        return

    # ==== Approve Subscription ====
    if query.data.startswith("approve_"):
        parts = query.data.split("_")
        uid = int(parts[1])
        plan = parts[2]
        price = parts[3]
        paid_subscriptions[uid] = {"plan": plan, "active": True}
        await context.bot.send_message(chat_id=uid, text=f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ {plan} Subscription ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
        await query.edit_message_text("‚úÖ Approve ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç Permission ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return

    # ==== Cancel Subscription ====
    if query.data.startswith("cancel_"):
        await query.edit_message_text("‚ùå Subscription Request ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return

    # ==== Login Button ====
    if query.data == "login":
        await context.bot.send_message(chat_id=user_id, text="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Sid ‡¶è‡¶¨‡¶Ç Auth Token ‡¶¶‡¶ø‡¶® üéâ\n\n‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá: `<sid> <auth>`", parse_mode='Markdown')
        return

    # ==== Buy Button ====
    if query.data.startswith("buy_"):
        # data format: buy_<number>
        number = query.data[4:]
        # Check balance and token status from session
        session = user_sessions.get(user_id)
        if not session:
            await query.answer("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø‡•§ /login ‡¶¶‡¶ø‡¶®‡•§", show_alert=True)
            return

        sid = session.get("sid")
        auth = session.get("auth")

        # Simulate buying number: ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶∏‡¶≤ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶Ø‡ßá‡¶Æ‡¶® DB ‡¶è ‡¶∏‡ßá‡¶≠ ‡¶¨‡¶æ API ‡¶ï‡¶≤
        # ‡¶Ü‡¶ó‡ßá‡¶∞ Buy ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
        if user_buy_messages.get(user_id):
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=user_buy_messages[user_id])
            except:
                pass

        buy_text = (
            f"üéâ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶®‡ßá‡¶õ‡ßá‡¶®:\n\n"
            f"üìû Number: {number}\n"
            f"‚≠ï User: {user_name}\n"
            f"‚è∞ ‡¶∏‡¶Æ‡ßü ‡¶∏‡ßÄ‡¶Æ‡¶æ: ‡ßß ‡¶Æ‡¶æ‡¶∏\n\n"
            f"üôè ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶∏‡¶æ‡¶¨‡¶ß‡¶æ‡¶®‡ßá‡•§"
        )
        sent_msg = await context.bot.send_message(chat_id=user_id, text=buy_text)
        user_buy_messages[user_id] = sent_msg.message_id
        return

# ===========================
# /buy ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°: ‡¶ï‡¶æ‡¶®‡¶æ‡¶°‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
# ===========================
async def buy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶ö‡ßá‡¶ï
    if not (paid_subscriptions.get(user_id, {}).get("active") or free_trial_users.get(user_id) == "active"):
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Subscription ‡¶®‡ßá‡¶á‡•§ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /start ‡¶è ‡¶ó‡¶ø‡ßü‡ßá Subscription ‡¶®‡¶ø‡¶®‡•§")
        return

    # ‡¶Ü‡¶ó‡ßá‡¶∞ Buy ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞
    if user_buy_messages.get(user_id):
        try:
            await context.bot.delete_message(chat_id=user_id, message_id=user_buy_messages[user_id])
        except:
            pass

    # ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
    keyboard = []
    for num in canada_numbers[:20]:  # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡ß®‡ß¶ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞
        kb_num = num.replace("+1", "")  # ‡¶™‡ßç‡¶≤‡¶æ‡¶∏ ‡¶ì‡ßü‡¶æ‡¶® ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
        keyboard.append([InlineKeyboardButton(kb_num, callback_data=f"buy_{num}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    sent = await update.message.reply_text("‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=reply_markup)
    user_buy_messages[user_id] = sent.message_id

# ========================
# Sid/Auth Token ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
# ========================
async def handle_sid_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if not (paid_subscriptions.get(user_id, {}).get("active") or free_trial_users.get(user_id) == "active"):
        return

    try:
        sid, auth = text.split(" ", 1)
    except Exception:
        await update.message.reply_text("‚ö†Ô∏è ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá Sid ‡¶è‡¶¨‡¶Ç Auth ‡¶¶‡¶ø‡¶®, ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: `<sid> <auth>`", parse_mode='Markdown')
        return

    async with aiohttp.ClientSession(auth=aiohttp.BasicAuth(sid, auth)) as session:
        async with session.get("https://api.twilio.com/2010-04-01/Accounts.json") as resp:
            if resp.status == 401:
                await update.message.reply_text("üéÉ ‡¶ü‡ßã‡¶ï‡ßá‡¶® Suspend ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®")
                return
            data = await resp.json()
            account_name = data['accounts'][0]['friendly_name']
            balance_url = f"https://api.twilio.com/2010-04-01/Accounts/{sid}/Balance.json"

        async with session.get(balance_url) as b:
            balance_data = await b.json()
            balance = float(balance_data.get("balance", 0.0))
            currency = balance_data.get("currency", "USD")

            if currency != "USD":
                rate_url = f"https://open.er-api.com/v6/latest/{currency}"
                async with session.get(rate_url) as rate_resp:
                    rates = await rate_resp.json()
                    usd_rate = rates["rates"].get("USD", 1)
                    balance = balance * usd_rate

            user_sessions[user_id] = {"sid": sid, "auth": auth}
            await update.message.reply_text(
                f"üéâ ùêãùê®ùê† ùêàùêß ùêíùêÆùêúùêúùêûùê¨ùê¨ùêüùêÆùê•üéâ\n\n"
                f"‚≠ï ùóîùó∞ùó∞ùóºùòÇùóªùòÅ ùó°ùóÆùó∫ùó≤ : {account_name}\n"
                f"‚≠ï ùóîùó∞ùó∞ùóºùòÇùóªùòÅ ùóïùóÆùóπùóÆùóªùó∞ùó≤ : ${balance:.2f}\n\n"
                f"‡¶¨‡¶ø‡¶É‡¶¶‡ßç‡¶∞‡¶É  ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ùóïùóÆùóπùóÆùóªùó∞ùó≤ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶¨‡ßá‡¶® ‡¶ï‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ ‚ôªÔ∏è\n\n"
                f"Founded By ùó†ùóø ùóòùòÉùóÆùóª üçÅ"
            )

# ====================
# Webhook ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
# ====================
async def handle_update(request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.update_queue.put(update)
    return web.Response(text="OK")

# ====================
# Application ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
# ====================
application = Application.builder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("login", login_command))
application.add_handler(CommandHandler("buy", buy_command))
application.add_handler(CallbackQueryHandler(handle_callback))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sid_auth))

# ====================
# Run Webhook
# ====================
async def main():
    await application.initialize()
    await application.start()
    app = web.Application()
    app.router.add_post(f"/{BOT_TOKEN}", handle_update)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 10000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logger.info("Bot is running via webhook...")
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
