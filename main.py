import telebot
from telebot import types
import requests
from flask import Flask, request
import re

# === CONFIGURATION ===
API_TOKEN = 'YOUR_BOT_TOKEN'  # <-- ржПржЦрж╛ржирзЗ рждрзЛржорж╛рж░ Bot Token ржмрж╕рж╛ржУ
CHANNEL_USERNAME = '@Evans_info'
WEBHOOK_URL = 'https://twilio-test-yqiu.onrender.com'  # <-- ржПржЦрж╛ржирзЗ рждрзЛржорж╛рж░ Render рж▓рж┐ржВржХ ржмрж╕рж╛ржУ

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_sessions = {}  # Store user SID+AUTH

# === BUTTON GENERATORS ===
def join_verify_buttons():
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("Join ЁЯЯв", url="https://t.me/Evans_info"),
        types.InlineKeyboardButton("Verify тЬЕ", callback_data="verify")
    )
    return markup

def login_button():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("Login ЁЯФС", callback_data="login"))
    return markup

def logout_button():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("Log Out ЁЯФЩ", callback_data="logout"))
    return markup

# === TWILIO LOGIN FUNCTION ===
def twilio_login(sid, token):
    try:
        acc = requests.get(
            f'https://api.twilio.com/2010-04-01/Accounts/{sid}.json',
            auth=(sid, token)
        )
        if acc.status_code != 200:
            return False, None, None

        name = acc.json().get('friendly_name', 'Unknown')

        balance_res = requests.get(
            f'https://api.twilio.com/2010-04-01/Accounts/{sid}/Balance.json',
            auth=(sid, token)
        )
        balance_data = balance_res.json()
        balance = float(balance_data['balance'])
        currency = balance_data['currency']

        # Currency convert if not USD
        if currency != 'USD':
            conv = requests.get(
                f"https://api.exchangerate.host/convert?from={currency}&to=USD&amount={balance}"
            ).json()
            balance = float(conv['result'])

        return True, name, f"{balance:.2f}"
    except:
        return False, None, None

# === /start HANDLER ===
@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = message.from_user.id
    try:
        member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status in ['member', 'administrator', 'creator']:
            bot.send_message(
                message.chat.id,
                "ЁЯОЙ ржзржирзНржпржмрж╛ржж ржмржЯржЯрж┐ ржПржЦржи ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд /login ржжрж┐рзЯрзЗ Log In ржХрж░рзБржи"
            )
        else:
            bot.send_message(
                message.chat.id,
                "ЁЯдЦ ржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржЪрж╛ржЗрж▓рзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬрзЯрзЗржи ржерж╛ржХрждрзЗ рж╣ржмрзЗ",
                reply_markup=join_verify_buttons()
            )
    except:
        bot.send_message(message.chat.id, "тЭМ ржЪрзНржпрж╛ржирзЗрж▓ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛ред ржмржЯржХрзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржмрж╛ржирж╛ржиред")

# === VERIFY BUTTON HANDLER ===
@bot.callback_query_handler(func=lambda call: call.data == 'verify')
def verify_handler(call):
    user_id = call.from_user.id
    try:
        member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status in ['member', 'administrator', 'creator']:
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(
                call.message.chat.id,
                "ЁЯОЙ ржзржирзНржпржмрж╛ржж ржмржЯржЯрж┐ ржПржЦржи ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд /login ржжрж┐рзЯрзЗ Log In ржХрж░рзБржи"
            )
        else:
            bot.answer_callback_query(
                call.id,
                "ЁЯНБ ржЖржЧрзЗ Join ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬрзЯрзЗржи рж╣рзЯрзЗ ржирзЗ рждрж╛рж░ ржкрж░ Verify ржХрж░ тЩ╗я╕П",
                show_alert=True
            )
    except:
        bot.answer_callback_query(call.id, "тЭМ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛ред")

# === /login HANDLER ===
@bot.message_handler(commands=['login'])
def login_command(message):
    bot.send_message(
        message.chat.id,
        "Login ржХрж░рж╛рж░ ржЬржирзНржп ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи",
        reply_markup=login_button()
    )

# === LOGIN BUTTON CLICK ===
@bot.callback_query_handler(func=lambda call: call.data == 'login')
def login_click(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(
        call.message.chat.id,
        "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ `<SID> <AUTH>` ржлрж░ржорзНржпрж╛ржЯрзЗ ржкрж╛ржарж╛ржи",
        parse_mode='Markdown'
    )

# === CREDENTIAL INPUT HANDLER ===
@bot.message_handler(func=lambda m: re.match(r'^AC[a-zA-Z0-9]{32} [a-zA-Z0-9]{32}$', m.text.strip()))
def sid_auth_handler(message):
    sid, auth = message.text.strip().split()
    success, name, balance = twilio_login(sid, auth)

    if success:
        user_sessions[message.from_user.id] = {'sid': sid, 'auth': auth}
        bot.send_message(
            message.chat.id,
            f"""ЁЯОЙ ЁЭРЛЁЭРиЁЭРа ЁЭРИЁЭРз ЁЭРТЁЭРоЁЭРЬЁЭРЬЁЭРЮЁЭРмЁЭРмЁЭРЯЁЭРоЁЭРе ЁЯОЙ

тнХ ЁЭЧФЁЭЧ░ЁЭЧ░ЁЭЧ╝ЁЭШВЁЭЧ╗ЁЭШБ ЁЭЧбЁЭЧоЁЭЧ║ЁЭЧ▓ : `{name}`
тнХ ЁЭЧФЁЭЧ░ЁЭЧ░ЁЭЧ╝ЁЭШВЁЭЧ╗ЁЭШБ ЁЭЧХЁЭЧоЁЭЧ╣ЁЭЧоЁЭЧ╗ЁЭЧ░ЁЭЧ▓ : `${balance}`

ржмрж┐ржГржжрзНрж░ржГ ржирж╛ржорзНржмрж╛рж░ ржХрж┐ржирж╛рж░ ржЖржЧрзЗ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЪрзЗржХ ржХрж░рзЗ ржирж┐ржмрзЗржи тЩ╗я╕П
ржирж╛ржорзНржмрж╛рж░ ржХрж┐ржирж╛рж░ ржЬржирзНржп ржПржЗ ржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи : @Twiliowork_bot

Founded By ЁЭЧаЁЭЧ┐ ЁЭЧШЁЭШГЁЭЧоЁЭЧ╗ ЁЯНБ
""",
            parse_mode='Markdown',
            reply_markup=logout_button()
        )
    else:
        bot.send_message(
            message.chat.id,
            "ЁЯОГ Congratulations ЁЯОЙ ржЖржкржирж╛рж░ ржЯрзЛржХрзЗржи ржирж╖рзНржЯ рж╣рзЯрзЗ ржЧрзЗржЫрзЗ, ржЕржирзНржп ржЯрзЛржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи",
            reply_markup=login_button()
        )

# === LOGOUT BUTTON ===
@bot.callback_query_handler(func=lambda call: call.data == 'logout')
def logout_user(call):
    user_sessions.pop(call.from_user.id, None)
    bot.edit_message_text("Log Out Success тЬЕ", call.message.chat.id, call.message.message_id)

# === WEBHOOK HANDLER ===
@app.route('/', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        update = telebot.types.Update.de_json(request.data.decode("utf-8"))
        bot.process_new_updates([update])
        return 'ok', 200
    return 'invalid', 403

# === RUN FLASK APP ===
if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host='0.0.0.0', port=8080)
