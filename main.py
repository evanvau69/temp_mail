import os
import logging
import asyncio
import aiohttp
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзЛ int type

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

free_trial_users = {}
user_sessions = {}

# Canada area codes - ржЙржжрж╛рж╣рж░ржг рж╕рж░рзВржк ржХрж┐ржЫрзБ ржХрзЛржб ржжрж┐рж▓рж╛ржо, ржЪрж╛ржЗрж▓рзЗ ржЖрж░рзЛ ржмрж╛рзЬрж╛рждрзЗ ржкрж╛рж░рзЛ
CANADA_AREA_CODES = [
    "204", "236", "249", "250", "289", "306", "343", "365", "387", "403",
    "416", "418", "431", "437", "438", "450", "506", "514", "519", "548",
    "579", "581", "587", "604", "613", "639", "647", "672", "705", "709",
    "742", "778", "780", "782", "807", "819", "825", "867", "873", "902",
    "905"
]

# Permission ржЪрзЗржХ ржбрзЗржХрзЛрж░рзЗржЯрж░
def permission_required(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if free_trial_users.get(user_id) != "active":
            if update.message:
                await update.message.reply_text("тЭМ ржЖржкржирж╛рж░ ржЕржирзБржорждрж┐ ржирзЗржЗред ржкрзНрж░ржержорзЗ Subscription ржирж┐ржиред")
            elif update.callback_query:
                await update.callback_query.answer("тЭМ ржЖржкржирж╛рж░ ржЕржирзБржорждрж┐ ржирзЗржЗред ржкрзНрж░ржержорзЗ Subscription ржирж┐ржиред", show_alert=True)
            return
        return await func(update, context, *args, **kwargs)
    return wrapper


@permission_required
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name
    username = update.effective_user.username or "N/A"

    if free_trial_users.get(user_id) == "active":
        keyboard = [[InlineKeyboardButton("Login ЁЯФС", callback_data="login")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"{user_name} Subscription ржЪрж╛рж▓рзБ ржЖржЫрзЗ ржПржмрж╛рж░ Log In ржХрж░рзБржи", reply_markup=reply_markup)
        return

    keyboard = [
        [InlineKeyboardButton("тмЬ 1 Hour - Free ЁЯМ╕", callback_data="plan_free")],
        [InlineKeyboardButton("ЁЯФ┤ 1 Day - 2$", callback_data="plan_1d")],
        [InlineKeyboardButton("ЁЯЯа 7 Day - 10$", callback_data="plan_7d")],
        [InlineKeyboardButton("ЁЯЯб 15 Day - 15$", callback_data="plan_15d")],
        [InlineKeyboardButton("ЁЯЯв 30 Day - 20$", callback_data="plan_30d")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"Welcome {user_name} ЁЯМ╕\nржЖржкржирж┐ ржХрзЛржиржЯрж┐ ржирж┐рждрзЗ ржЪрж╛ржЪрзНржЫрзЗржи..?", reply_markup=reply_markup)

@permission_required
async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if free_trial_users.get(user_id) == "active":
        keyboard = [[InlineKeyboardButton("Login ЁЯФС", callback_data="login")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("ржЖржкржирж╛рж░ Subscription ржЪрж╛рж▓рзБ ржЖржЫрзЗ, ржирж┐ржЪрзЗ Login ржХрж░рзБржи тмЗя╕П", reply_markup=reply_markup)
    else:
        await update.message.reply_text("тЭМ ржЖржкржирж╛рж░ Subscription ржирзЗржЗред ржкрзНрж░ржержорзЗ Subscription ржирж┐ржиред")

# /buy ржХржорж╛ржирзНржб - random ржмрж╛ specific area code ржПрж░ Canada ржирж╛ржорзНржмрж╛рж░ рзйрзж ржЯрж╛ ржжрж┐ржмрзЗ
@permission_required
async def buy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    args = context.args

    import random

    def generate_random_number(area_code):
        # +1 рж╣рж▓ Canada country code
        # ржирж╛ржорзНржмрж╛рж░рзЗрж░ ржмрж╛ржХрж┐ржЯрж╛ random 7 digit, 10 digit full: +1 + area_code + 7 random digits
        return f"+1{area_code}{random.randint(1000000, 9999999)}"

    area_code = None
    if args:
        candidate = args[0]
        # args ржерзЗржХрзЗ area_code ржкрзЗрждрзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмрзЛ (3 digit numeric)
        if candidate.isdigit() and len(candidate) == 3 and candidate in CANADA_AREA_CODES:
            area_code = candidate

    if area_code is None:
        area_code = random.choice(CANADA_AREA_CODES)

    numbers = [generate_random_number(area_code) for _ in range(30)]

    text = "ржЖржкржирж╛рж░ ржирж╛ржорзНржмрж╛рж░ ржЧрзБрж▓рзЛ рж╣рж▓рзЛ ЁЯСЗЁЯСЗ\n" + "\n".join(numbers)
    await update.message.reply_text(text)


# ржЗржЙржЬрж╛рж░ ржпрзЗржХрзЛржи ржорзЗрж╕рзЗржЬрзЗ number ржкрж╛ржарж╛рж▓рзЗ detect ржХрж░ржмрзЗ ржПржмржВ ржкрзНрж░рждрзНржпрзЗржХ ржирж╛ржорзНржмрж╛рж░рзЗрж░ ржирж┐ржЪрзЗ Buy ржмрж╛ржЯржи ржжрж┐рзЯрзЗ ржкрж╛ржарж╛ржмрзЗ
@permission_required
async def handle_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    import re

    # Canada phone number pattern: country code +1 and area code + 7 digit
    # ржЗржЙржЬрж╛рж░ ржпрзЗржХрзЛржи ржлрж░ржорзНржпрж╛ржЯрзЗ ржирж╛ржорзНржмрж╛рж░ ржкрж╛ржарж╛рждрзЗ ржкрж╛рж░рзЗ рждрж╛ржЗ ржирж┐ржЪрзЗрж░ ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржжрж┐рзЯрзЗ ржХрзНржпрж╛ржкржЪрж╛рж░ ржХрж░ржм
    # ржЙржжрж╛рж╣рж░ржг ржкрзНржпрж╛ржЯрж╛рж░рзНржи: +1 416 123 4567, 14161234567, 4161234567 ржЗрждрзНржпрж╛ржжрж┐ ржерзЗржХрзЗ ржирж╛ржорзНржмрж╛рж░ ржмрзЗрж░ ржХрж░ржмрзЗ
    # Simplify: country code +1 optional, area code must be valid canadian area code, then 7 digit number

    pattern = r"(?:\+?1)?\s*(" + "|".join(CANADA_AREA_CODES) + r")\s*\-?\s*(\d{3})\s*\-?\s*(\d{4})"
    matches = re.findall(pattern, text)

    if not matches:
        # ржпржжрж┐ ржирж╛ржорзНржмрж╛рж░ ржирж╛ ржкрж╛рзЯ, ржХрж┐ржЫрзБ рж░рзЗрж╕ржкржирзНрж╕ ржирж╛ ржжрж┐рждрзЗ ржЪрж╛ржЗрж▓рзЗ ржПржЦрж╛ржирзЗ return ржХрж░рзЛ
        return

    # ржкрзНрж░рждрж┐ржЯрж╛ ржирж╛ржорзНржмрж╛рж░ ржмрж╛ржирж╛ржмрзЗ +1 + area_code + 7 digit ржлрж░ржорзНржпрж╛ржЯрзЗ
    buttons = []
    numbers_text_lines = []
    for match in matches:
        area_code = match[0]
        first3 = match[1]
        last4 = match[2]
        full_number = f"+1{area_code}{first3}{last4}"
        numbers_text_lines.append(full_number)
        buttons.append([InlineKeyboardButton("Buy ЁЯТ░", callback_data=f"buy_{full_number}")])

    message_text = "ржирж┐ржЪрзЗрж░ ржирж╛ржорзНржмрж╛рж░ржЧрзБрж▓рзЛ ржерзЗржХрзЗ Buy ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи ЁЯСЗ\n" + "\n".join(numbers_text_lines)

    await update.message.reply_text(message_text, reply_markup=InlineKeyboardMarkup(buttons))


# Buy ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ ржирж╛ржорзНржмрж╛рж░ ржмрж╛ржЯржи рж╕рж╣ ржорзЗрж╕рзЗржЬ edit рж╣ржмрзЗ, balance check ржХрж░ржмрзЗ ржПржмржВ рж╕рж╛рзЬрж╛ ржжрж┐ржмрзЗ
@permission_required
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_name = query.from_user.full_name
    username = query.from_user.username or "N/A"

    data = query.data

    if data == "plan_free":
        if free_trial_users.get(user_id):
            await query.edit_message_text("тЪая╕П ржЖржкржирж┐ ржПрж░ржЗ ржоржзрзНржпрзЗ Free Trial ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЗржиред")
        else:
            free_trial_users[user_id] = "active"
            await query.message.delete()
            await context.bot.send_message(chat_id=user_id, text="тЬЕ ржЖржкржирж╛рж░ Free Trial Subscription ржЯрж┐ ржЪрж╛рж▓рзБ рж╣рзЯрзЗржЫрзЗ")

            async def revoke():
                await asyncio.sleep(3600)
                free_trial_users.pop(user_id, None)
                await context.bot.send_message(chat_id=user_id, text="ЁЯМ╗ ржЖржкржирж╛рж░ Free Trial ржЯрж┐ рж╢рзЗрж╖ рж╣рзЯрзЗржЫрзЗ")
            asyncio.create_task(revoke())

    elif data.startswith("plan_"):
        plan_info = {
            "plan_1d": ("1 Day", "2$"),
            "plan_7d": ("7 Day", "10$"),
            "plan_15d": ("15 Day", "15$"),
            "plan_30d": ("30 Day", "20$")
        }
        duration, price = plan_info.get(data, ("", ""))

        text = (
            f"{user_name} {duration} рж╕ржорзЯрзЗрж░ ржЬржирзНржп Subscription ржирж┐рждрзЗ ржЪрж╛ржЪрзНржЫрзЗред\n\n"
            f"ЁЯФЖ User Name : {user_name}\n"
            f"ЁЯФЖ User ID : {user_id}\n"
            f"ЁЯФЖ Username : @{username}"
        )
        buttons = [
            [InlineKeyboardButton("APPROVE тЬЕ", callback_data=f"approve_{user_id}"),
             InlineKeyboardButton("CANCEL тЭМ", callback_data=f"cancel_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)

        await query.message.delete()
        await context.bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=reply_markup)

        payment_msg = (
            f"Please send {price} to Binance Pay ID: \nржкрзЗржорзЗржирзНржЯ ржХрж░рзЗ ржкрзНрж░ржорж╛ржг рж╣рж┐рж╕рж╛ржмрзЗ Admin ржПрж░ ржХрж╛ржЫрзЗ рж╕рзНржХрж┐ржирж╢рж░рзНржЯ ржЕржержмрж╛ transaction ID ржжрж┐ржи @Mr_Evan3490\n\n"
            f"Your payment details:\n"
            f"ЁЯЖФ User ID: {user_id}\n"
            f"ЁЯСд Username: @{username}\n"
            f"ЁЯУЛ Plan: {duration}\n"
            f"ЁЯТ░ Amount: {price}"
        )
        await context.bot.send_message(chat_id=user_id, text=payment_msg)

    elif data == "login":
        await context.bot.send_message(chat_id=user_id, text="ржЖржкржирж╛рж░ Sid ржПржмржВ Auth Token ржжрж┐ржи ЁЯОЙ\n\nржмрзНржпржмрж╣рж╛рж░ рж╣ржмрзЗ: `<sid> <auth>`", parse_mode='Markdown')

    elif data.startswith("approve_"):
        uid = int(data.split("_")[1])
        free_trial_users[uid] = "active"
        await context.bot.send_message(chat_id=uid, text="тЬЕ ржЖржкржирж╛рж░ Subscription ржЪрж╛рж▓рзБ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ")
        await query.edit_message_text("тЬЕ Approve ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржПржмржВ Permission ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред")

    elif data.startswith("cancel_"):
        await query.edit_message_text("тЭМ Subscription Request ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")

    elif data.startswith("buy_"):
        number = data[4:]
        # Twilio API ржжрж┐рзЯрзЗ Balance ржЪрзЗржХ ржХрж░ржмрзЛ ржПржмржВ Token Suspend ржЪрзЗржХ ржХрж░ржмрзЛ
        # Sid, Auth ржЯрзЛржХрзЗржи User ржерзЗржХрзЗ ржЖржЧрзЗ Sid/Auth рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржерзЗржХрзЗ ржкрж╛ржмрзЗ ржмрж▓рзЗ ржзрж░рзЗ ржирж┐ржЪрзНржЫрж┐

        # ржПржЦрж╛ржирзЗ User Sid/Auth ржЯрзЛржХрзЗржи session dict ржП ржерж╛ржХрждрзЗ рж╣ржмрзЗ
        sid_auth = user_sessions.get(user_id)
        if not sid_auth:
            await query.edit_message_text(f"тЭМ ржЖржкржирж╛рж░ Sid/Auth Token рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред ржкрзНрж░ржержорзЗ /login ржжрж┐рзЯрзЗ рж╕рзЗржЯ ржХрж░рзБржиред")
            return

        sid, auth = sid_auth

        async with aiohttp.ClientSession(auth=aiohttp.BasicAuth(sid, auth)) as session:
            # ржЪрзЗржХ ржЯрзЛржХрзЗржи Suspend ржирж╛ржХрж┐
            async with session.get("https://api.twilio.com/2010-04-01/Accounts.json") as resp:
                if resp.status == 401:
                    await query.edit_message_text("ЁЯШе ржЯрзЛржХрзЗржи Suspend рж╣рзЯрзЗржЫрзЗ ЁЯШе ржЕржирзНржп ржЯрзЛржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи тЩ╗я╕П")
                    return
                data = await resp.json()
                account_name = data['accounts'][0]['friendly_name']

            # ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЪрзЗржХ
            balance_url = f"https://api.twilio.com/2010-04-01/Accounts/{sid}/Balance.json"
            async with session.get(balance_url) as b:
                balance_data = await b.json()
                balance = float(balance_data.get("balance", 0.0))
                currency = balance_data.get("currency", "USD")

                if currency != "USD":
                    rate_url = f"https://open.er-api.com/v6/latest/{currency}"
                    async with session.get(rate_url) as rate_resp:
                        rates = await rate_resp.json()
                        usd_rate = rates["rates"].get("USD", 1)
                        balance = balance * usd_rate

            # ржпржжрж┐ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ рззрзж$ ржПрж░ ржирж┐ржЪрзЗ ржзрж░рзЗ ржирж┐ржЪрзНржЫрж┐ (рждрзБржорж┐ ржЪрж╛ржЗрж▓рзЗ ржкрзНрж▓рзНржпрж╛ржи ржЕржирзБржпрж╛рзЯрзА ржЪрзЗржХ ржХрж░рзЛ)
            if balance < 10:
                await query.edit_message_text("тЭМ ржЖржкржирж╛рж░ ржЯрзЛржХрзЗржирзЗ ржкрж░рзНржпрж╛ржкрзНржд ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржирж╛ржЗ ЁЯШе ржЕржирзНржп ржЯрзЛржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи тЩ╗я╕П")
                return

            # Number buy successful - (simulate ржХрж░рж╛рж░ ржЬржирзНржп)
            # ржмрж╛рж╕рзНрждржмрзЗ рждрзБржорж┐ Twilio API ржжрж┐рзЯрзЗ ржирж╛ржорзНржмрж╛рж░ ржХрж┐ржиржмрзЗ ржПржЦрж╛ржирзЗ рж╕рзЗржЗ ржХрж▓ ржпрзБржХрзНржд ржХрж░ржмрзЗ
            await query.edit_message_text(
                f"ЁЯОЙ Congestion ржирж╛ржорзНржмрж╛рж░ржЯрж┐ ржХрж┐ржирж╛ рж╣рзЯрзЗржЫрзЗ ЁЯОЙ\n\n{number}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Message тЬЙя╕П", callback_data=f"message_{number}")]])
            )

    elif data.startswith("message_"):
        number = data[8:]
        # ржПржЦрж╛ржирзЗ ржкрзНрж░рзЯрзЛржЬржи ржоржд ржЗржЙржЬрж╛рж░ржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛрж░ ржЬржирзНржп UI ржжрж┐рждрзЗ ржкрж╛рж░рзЛ
        await query.answer("Message ржлрж┐ржЪрж╛рж░ ржЖрж╕ржЫрзЗ рж╢рзАржШрзНрж░ржЗ...")



@permission_required
async def handle_sid_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    try:
        sid, auth = text.split(" ", 1)
    except:
        await update.message.reply_text("тЪая╕П рж╕ржарж┐ржХржнрж╛ржмрзЗ Sid ржПржмржВ Auth ржжрж┐ржи, ржЙржжрж╛рж╣рж░ржг: `<sid> <auth>`", parse_mode='Markdown')
        return

    async with aiohttp.ClientSession(auth=aiohttp.BasicAuth(sid, auth)) as session:
        async with session.get("https://api.twilio.com/2010-04-01/Accounts.json") as resp:
            if resp.status == 401:
                await update.message.reply_text("ЁЯОГ ржЯрзЛржХрзЗржи Suspend рж╣рзЯрзЗ ржЧрзЗржЫрзЗ ржЕржирзНржп ржЯрзЛржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи")
                return
            data = await resp.json()
            account_name = data['accounts'][0]['friendly_name']

        balance_url = f"https://api.twilio.com/2010-04-01/Accounts/{sid}/Balance.json"
        async with session.get(balance_url) as b:
            balance_data = await b.json()
            balance = float(balance_data.get("balance", 0.0))
            currency = balance_data.get("currency", "USD")

            if currency != "USD":
                rate_url = f"https://open.er-api.com/v6/latest/{currency}"
                async with session.get(rate_url) as rate_resp:
                    rates = await rate_resp.json()
                    usd_rate = rates["rates"].get("USD", 1)
                    balance = balance * usd_rate

    user_sessions[user_id] = (sid, auth)

    await update.message.reply_text(
        f"ЁЯОЙ ЁЭРЛЁЭРиЁЭРа ЁЭРИЁЭРз ЁЭРТЁЭРоЁЭРЬЁЭРЬЁЭРЮЁЭРмЁЭРмЁЭРЯЁЭРоЁЭРеЁЯОЙ\n\n"
        f"тнХ ЁЭЧФЁЭЧ░ЁЭЧ░ЁЭЧ╝ЁЭШВЁЭЧ╗ЁЭШБ ЁЭЧбЁЭЧоЁЭЧ║ЁЭЧ▓ : {account_name}\n"
        f"тнХ ЁЭЧФЁЭЧ░ЁЭЧ░ЁЭЧ╝ЁЭШВЁЭЧ╗ЁЭШБ ЁЭЧХЁЭЧоЁЭЧ╣ЁЭЧоЁЭЧ╗ЁЭЧ░ЁЭЧ▓ : ${balance:.2f}\n\n"
        f"ржмрж┐ржГржжрзНрж░ржГ  ржирж╛ржорзНржмрж╛рж░ ржХрж┐ржирж╛рж░ ржЖржЧрзЗ ржЕржмрж╢рзНржпржЗ ЁЭЧХЁЭЧоЁЭЧ╣ЁЭЧоЁЭЧ╗ЁЭЧ░ЁЭЧ▓ ржЪрзЗржХ ржХрж░рзЗ ржирж┐ржмрзЗржи ржХржо ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржерж╛ржХрж▓рзЗ ржирж╛ржорзНржмрж╛рж░ ржХрж┐ржирж╛ ржпрж╛ржмрзЗ ржирж╛ тЩ╗я╕П\n\n"
        f"Founded By ЁЭЧаЁЭЧ┐ ЁЭЧШЁЭШГЁЭЧоЁЭЧ╗ ЁЯНБ"
    )


async def handle_update(request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.update_queue.put(update)
    return web.Response(text="OK")


application = Application.builder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("login", login_command))
application.add_handler(CommandHandler("buy", buy_command))
application.add_handler(CallbackQueryHandler(handle_callback))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sid_auth))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_numbers))  # ржирж╛ржорзНржмрж╛рж░ detect ржПрж░ ржЬржирзНржп

# webhook рж╕рзЗржЯржЖржкрзЗрж░ ржЬржирзНржп ржпржжрж┐ ржжрж░ржХрж╛рж░ рж╣рзЯ
# app = web.Application()
# app.router.add_post('/webhook', handle_update)
# web.run_app(app, port=PORT)

if __name__ == "__main__":
    print("Bot Started")
    application.run_polling()
